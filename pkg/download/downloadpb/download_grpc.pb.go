// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: pkg/download/downloadpb/download.proto

package downloadpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileDownloadServiceClient is the client API for FileDownloadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileDownloadServiceClient interface {
	DownloadFile(ctx context.Context, in *FileDownloadRequest, opts ...grpc.CallOption) (FileDownloadService_DownloadFileClient, error)
	DeleteFile(ctx context.Context, in *FileDeleteRequest, opts ...grpc.CallOption) (*FileDeleteResponse, error)
}

type fileDownloadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileDownloadServiceClient(cc grpc.ClientConnInterface) FileDownloadServiceClient {
	return &fileDownloadServiceClient{cc}
}

func (c *fileDownloadServiceClient) DownloadFile(ctx context.Context, in *FileDownloadRequest, opts ...grpc.CallOption) (FileDownloadService_DownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileDownloadService_ServiceDesc.Streams[0], "/download.FileDownloadService/DownloadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileDownloadServiceDownloadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileDownloadService_DownloadFileClient interface {
	Recv() (*FileDownloadResponse, error)
	grpc.ClientStream
}

type fileDownloadServiceDownloadFileClient struct {
	grpc.ClientStream
}

func (x *fileDownloadServiceDownloadFileClient) Recv() (*FileDownloadResponse, error) {
	m := new(FileDownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileDownloadServiceClient) DeleteFile(ctx context.Context, in *FileDeleteRequest, opts ...grpc.CallOption) (*FileDeleteResponse, error) {
	out := new(FileDeleteResponse)
	err := c.cc.Invoke(ctx, "/download.FileDownloadService/DeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileDownloadServiceServer is the server API for FileDownloadService service.
// All implementations must embed UnimplementedFileDownloadServiceServer
// for forward compatibility
type FileDownloadServiceServer interface {
	DownloadFile(*FileDownloadRequest, FileDownloadService_DownloadFileServer) error
	DeleteFile(context.Context, *FileDeleteRequest) (*FileDeleteResponse, error)
	mustEmbedUnimplementedFileDownloadServiceServer()
}

// UnimplementedFileDownloadServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileDownloadServiceServer struct {
}

func (UnimplementedFileDownloadServiceServer) DownloadFile(*FileDownloadRequest, FileDownloadService_DownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedFileDownloadServiceServer) DeleteFile(context.Context, *FileDeleteRequest) (*FileDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedFileDownloadServiceServer) mustEmbedUnimplementedFileDownloadServiceServer() {}

// UnsafeFileDownloadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileDownloadServiceServer will
// result in compilation errors.
type UnsafeFileDownloadServiceServer interface {
	mustEmbedUnimplementedFileDownloadServiceServer()
}

func RegisterFileDownloadServiceServer(s grpc.ServiceRegistrar, srv FileDownloadServiceServer) {
	s.RegisterService(&FileDownloadService_ServiceDesc, srv)
}

func _FileDownloadService_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileDownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileDownloadServiceServer).DownloadFile(m, &fileDownloadServiceDownloadFileServer{stream})
}

type FileDownloadService_DownloadFileServer interface {
	Send(*FileDownloadResponse) error
	grpc.ServerStream
}

type fileDownloadServiceDownloadFileServer struct {
	grpc.ServerStream
}

func (x *fileDownloadServiceDownloadFileServer) Send(m *FileDownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FileDownloadService_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileDownloadServiceServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/download.FileDownloadService/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileDownloadServiceServer).DeleteFile(ctx, req.(*FileDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileDownloadService_ServiceDesc is the grpc.ServiceDesc for FileDownloadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileDownloadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "download.FileDownloadService",
	HandlerType: (*FileDownloadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteFile",
			Handler:    _FileDownloadService_DeleteFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DownloadFile",
			Handler:       _FileDownloadService_DownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/download/downloadpb/download.proto",
}
