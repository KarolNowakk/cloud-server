// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/scanner/scannerpb/scanner.proto

package scannerpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ScannerFileInfo struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Path                 string   `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Owner                string   `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Name                 string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Extension            string   `protobuf:"bytes,5,opt,name=extension,proto3" json:"extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScannerFileInfo) Reset()         { *m = ScannerFileInfo{} }
func (m *ScannerFileInfo) String() string { return proto.CompactTextString(m) }
func (*ScannerFileInfo) ProtoMessage()    {}
func (*ScannerFileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac268524070eb32b, []int{0}
}

func (m *ScannerFileInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScannerFileInfo.Unmarshal(m, b)
}
func (m *ScannerFileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScannerFileInfo.Marshal(b, m, deterministic)
}
func (m *ScannerFileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScannerFileInfo.Merge(m, src)
}
func (m *ScannerFileInfo) XXX_Size() int {
	return xxx_messageInfo_ScannerFileInfo.Size(m)
}
func (m *ScannerFileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ScannerFileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ScannerFileInfo proto.InternalMessageInfo

func (m *ScannerFileInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ScannerFileInfo) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ScannerFileInfo) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *ScannerFileInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ScannerFileInfo) GetExtension() string {
	if m != nil {
		return m.Extension
	}
	return ""
}

type ScannerRequest struct {
	DateTime             *timestamp.Timestamp `protobuf:"bytes,1,opt,name=dateTime,proto3" json:"dateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ScannerRequest) Reset()         { *m = ScannerRequest{} }
func (m *ScannerRequest) String() string { return proto.CompactTextString(m) }
func (*ScannerRequest) ProtoMessage()    {}
func (*ScannerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac268524070eb32b, []int{1}
}

func (m *ScannerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScannerRequest.Unmarshal(m, b)
}
func (m *ScannerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScannerRequest.Marshal(b, m, deterministic)
}
func (m *ScannerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScannerRequest.Merge(m, src)
}
func (m *ScannerRequest) XXX_Size() int {
	return xxx_messageInfo_ScannerRequest.Size(m)
}
func (m *ScannerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ScannerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ScannerRequest proto.InternalMessageInfo

func (m *ScannerRequest) GetDateTime() *timestamp.Timestamp {
	if m != nil {
		return m.DateTime
	}
	return nil
}

type ScannerResponse struct {
	Files                []*ScannerFileInfo `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ScannerResponse) Reset()         { *m = ScannerResponse{} }
func (m *ScannerResponse) String() string { return proto.CompactTextString(m) }
func (*ScannerResponse) ProtoMessage()    {}
func (*ScannerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac268524070eb32b, []int{2}
}

func (m *ScannerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScannerResponse.Unmarshal(m, b)
}
func (m *ScannerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScannerResponse.Marshal(b, m, deterministic)
}
func (m *ScannerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScannerResponse.Merge(m, src)
}
func (m *ScannerResponse) XXX_Size() int {
	return xxx_messageInfo_ScannerResponse.Size(m)
}
func (m *ScannerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ScannerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ScannerResponse proto.InternalMessageInfo

func (m *ScannerResponse) GetFiles() []*ScannerFileInfo {
	if m != nil {
		return m.Files
	}
	return nil
}

func init() {
	proto.RegisterType((*ScannerFileInfo)(nil), "scanner.ScannerFileInfo")
	proto.RegisterType((*ScannerRequest)(nil), "scanner.ScannerRequest")
	proto.RegisterType((*ScannerResponse)(nil), "scanner.ScannerResponse")
}

func init() {
	proto.RegisterFile("pkg/scanner/scannerpb/scanner.proto", fileDescriptor_ac268524070eb32b)
}

var fileDescriptor_ac268524070eb32b = []byte{
	// 286 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x51, 0xcf, 0x4f, 0x83, 0x30,
	0x18, 0x75, 0x3f, 0x50, 0xe9, 0x92, 0x99, 0x7c, 0x31, 0xb1, 0x21, 0x26, 0x1a, 0xbc, 0x78, 0x2a,
	0xc9, 0x4c, 0xbc, 0xeb, 0x81, 0xe8, 0xc5, 0x03, 0xdb, 0xc9, 0x78, 0x81, 0xed, 0x03, 0x89, 0xa3,
	0xad, 0xb4, 0x73, 0x5e, 0xfc, 0xdf, 0x2d, 0x2d, 0xc5, 0x64, 0x9e, 0x78, 0x7d, 0xef, 0xf1, 0x78,
	0x8f, 0x92, 0x1b, 0xf9, 0x51, 0x25, 0x6a, 0x9d, 0x73, 0x8e, 0xad, 0x7f, 0xca, 0xc2, 0x23, 0x26,
	0x5b, 0xa1, 0x05, 0x9c, 0xf4, 0xc7, 0xe8, 0xaa, 0x12, 0xa2, 0xda, 0x62, 0x62, 0xe9, 0x62, 0x57,
	0x26, 0xba, 0x6e, 0x50, 0xe9, 0xbc, 0x91, 0xce, 0x19, 0xff, 0x90, 0xb3, 0xa5, 0xf3, 0xa6, 0xf5,
	0x16, 0x9f, 0x79, 0x29, 0x60, 0x4e, 0xc6, 0xf5, 0x86, 0x8e, 0xae, 0x47, 0xb7, 0x61, 0x66, 0x10,
	0x00, 0x99, 0xca, 0x5c, 0xbf, 0xd3, 0xb1, 0x65, 0x2c, 0x86, 0x73, 0x12, 0x88, 0xbd, 0x79, 0x89,
	0x4e, 0x2c, 0xe9, 0x0e, 0x9d, 0x93, 0xe7, 0x0d, 0xd2, 0xa9, 0x73, 0x76, 0x18, 0x2e, 0x49, 0x88,
	0xdf, 0x1a, 0xb9, 0xaa, 0x05, 0xa7, 0x81, 0x15, 0xfe, 0x88, 0xf8, 0x89, 0xcc, 0xfb, 0xcf, 0x67,
	0xf8, 0xb9, 0x33, 0xcd, 0xe0, 0x9e, 0x9c, 0x6e, 0x72, 0x8d, 0x2b, 0xd3, 0xd3, 0x76, 0x98, 0x2d,
	0x22, 0xe6, 0x46, 0x30, 0x3f, 0x82, 0xad, 0xfc, 0x88, 0x6c, 0xf0, 0xc6, 0x0f, 0xc3, 0x90, 0x0c,
	0x95, 0x14, 0x5c, 0x21, 0x30, 0x12, 0x94, 0x66, 0x94, 0x32, 0x39, 0x13, 0x93, 0x43, 0x99, 0xff,
	0x49, 0x07, 0x8b, 0x33, 0x67, 0x5b, 0xbc, 0x11, 0xe8, 0xa8, 0x5e, 0x5d, 0x62, 0xfb, 0x55, 0xaf,
	0x11, 0x52, 0x17, 0x9c, 0x8a, 0xf6, 0x05, 0xf7, 0x9d, 0xae, 0xe0, 0xe2, 0x30, 0xa9, 0x2f, 0x1f,
	0xd1, 0xff, 0x82, 0xeb, 0x12, 0x1f, 0x3d, 0xce, 0x5e, 0xc3, 0xe1, 0xba, 0x8a, 0x63, 0xbb, 0xe5,
	0xee, 0x37, 0x00, 0x00, 0xff, 0xff, 0xb8, 0x42, 0x25, 0x8e, 0xce, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FileScannerServiceClient is the client API for FileScannerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FileScannerServiceClient interface {
	ScanForNewFiles(ctx context.Context, in *ScannerRequest, opts ...grpc.CallOption) (*ScannerResponse, error)
}

type fileScannerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileScannerServiceClient(cc grpc.ClientConnInterface) FileScannerServiceClient {
	return &fileScannerServiceClient{cc}
}

func (c *fileScannerServiceClient) ScanForNewFiles(ctx context.Context, in *ScannerRequest, opts ...grpc.CallOption) (*ScannerResponse, error) {
	out := new(ScannerResponse)
	err := c.cc.Invoke(ctx, "/scanner.FileScannerService/ScanForNewFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileScannerServiceServer is the server API for FileScannerService service.
type FileScannerServiceServer interface {
	ScanForNewFiles(context.Context, *ScannerRequest) (*ScannerResponse, error)
}

// UnimplementedFileScannerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFileScannerServiceServer struct {
}

func (*UnimplementedFileScannerServiceServer) ScanForNewFiles(ctx context.Context, req *ScannerRequest) (*ScannerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanForNewFiles not implemented")
}

func RegisterFileScannerServiceServer(s *grpc.Server, srv FileScannerServiceServer) {
	s.RegisterService(&_FileScannerService_serviceDesc, srv)
}

func _FileScannerService_ScanForNewFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileScannerServiceServer).ScanForNewFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scanner.FileScannerService/ScanForNewFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileScannerServiceServer).ScanForNewFiles(ctx, req.(*ScannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FileScannerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scanner.FileScannerService",
	HandlerType: (*FileScannerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScanForNewFiles",
			Handler:    _FileScannerService_ScanForNewFiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/scanner/scannerpb/scanner.proto",
}
